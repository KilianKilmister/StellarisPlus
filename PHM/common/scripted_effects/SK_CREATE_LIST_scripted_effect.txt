
SKU_LIST = {
	event_target:SKU_LIST_CONTROLLER = {
		set_country_flag = SKU_LIST_list:$list|last$
		set_country_flag = SKU_LIST_action:$action|overwrite$
		switch = {							#scope
			trigger = has_country_flag
			SKU_LIST_list:last = {
				if = { limit = {} SKU_LIST_ERROR = { error_type = no_last_list } }
				else = {
					set_variable = {
						which = SKU_CURRENT_LIST_ID
						value = SKU_LAST_LIST_ID
					}
					event_target:SKU_LAST_CREATED_LIST = { save_event_target_as = SKU_CURRENT_LIST } }
			}							
			SKU_LIST_list:new = { SKU_CREATE_LIST = yes }
			$identifier$_$list$ = { }				#saved event target list
			SKU_LIST_list:get_list = { }
			SKU_LIST_list:$list$ = { event_target:$list$ = { save_event_target_as = SKU_CURRENT_LIST } }
		}
		set_variable = {
			which = SKU_LAST_LIST_ID
			value = SKU_CURRENT_LIST_ID
		}
		switch = { 								#scope
			trigger = $list$_$num$ 				#DYNAMIC ATTRIBUTE
			last = {}							#last created list
		}
		switch = { #actions
			trigger = $action|overwrite$
			add_object = {}						#add this object to the list
			clear_objects = {}					#clear every item
			clear_objects_$attribute$ = {}		#clear every item
			copy_to = {}						#copy to target list
			delete_list = {}					#delete scoped list
			get_$attribute$ = {}				#e.g. get_ID_<list id> 
			get_content = {}					#get every list item
			get_content_$attribute$ = {}		#get every list item with $attribute$
			set_flag = {}						#sets flag
		}
		if = {
			limit = { $print$ = $value$ }
			SKU_PRINT = yes
		}
		
	}
}

SKU_LIST_ERROR = {
	set_country_flag = SKU_LIST_ERROR:$error_type$
		log = "SKU:=============================="
		log = "Instance of SKU_LIST failed"
		log = "SKU_LIST = { [SKU_GetArguments] } "
		log = "-type: $error_type"
		log = "-description: [SKU_LIST_GetErrorDescription]"
		log = "-info: [SKU_LIST_GetErrorInfo]"
		log = "-info: [SKU_LIST_GetErrorInfo2]"
		log = "=================================="
	#remove_country_flag = SKU_LIST_ERROR:$error_type$
}

SKU_PRINT = {
	log = ""
}

SKU_CREATE_LIST = {
	event_target:SKU_LIST_CONTROLLER = {
		while = {
			limit = {
					has_country_flag = SKU_LIST_ID_$SKU_LIST_ID|0$
			}
			change_variable = {
				which = $SKU_LIST_ID$
				value = 1
			}
		}
		set_variable = {
			which = $SKU_LIST_ID$
			value = 0
		}
	}
}

get_list = {
	random_country = {
		limit = { has_country_flag = SKU_LIST_ID_$list_id$ }
		save_event_target_as = SKU_CURRENT_LIST
	}
}

attribute_list = {
}


#valid scopes: country, fleet, galactic_object (for solar system), leader, planet
SKU_INITIALIZE_NEW_LIST = {
	log = "----------SKU----------"
	if = {
		remove_global_flag = SKU_LIST_CREATION_FAILED
		limit = {
			NOT = {
				any_country = {
					has_country_flag = SKU_EMPTY_LIST
				}
			}
		}
		log = "Initialize new List:"
		### SPAWN DUMMY COUNTRY
		#as an anchor for the list, is destroyed after
		last_created_country = { #assigns unique ID
			while = {
				limit = {
					any_country = {
						check_variable = {
							which = SKU_LIST_ID
							value = prev
						}
					}
				}
				change_variable = {
					which = SKU_LIST_ID
					value = 1
				}
			}
			set_name = "SKU_LIST #[this.SKU_LIST_ID]"
			set_country_flag = SKU_EMPTY_LIST
			#set_timed_global_flag = { flag =SKU_EMPTY_LIST_AVALABLE_cooldown days = 2 }
		}
	}
	else = {
		log = "- NOTE: pre-existing unused list. "
		log = "- using that list instead"
	}
	log = "-List ID: [SKU_LAST_CREATED_LIST.SKU_LIST_ID]"
	log = "-----------------------"
}

SKU_FILL_LIST = {	#Add option to clear
	if = {
		limit = { NOT = { has_global_flag = SKU_LIST_CREATION_FAILED } }
		if = { #check if the scope is supported
			limit = {
				NOR = {
				is_scope_type = country
				is_scope_type = fleet
				is_scope_type = galactic_object
				is_scope_type = leader
				is_scope_type = planet
				}
			}
			log = "==========SKU=========="
			log = "FAILED TO FILL LIST"
			log = "ERRROR: UNSUPPORTED SCOPE"
			log = "current_scope = [this.GetName]"
			log = "supported scopes: country, fleet, galactic_object (for solar system), leader, planet"
			log = "=========================="
			set_timed_global_flag = {
				flag = SKU_LIST_CREATION_FAILED
				days = 1
			}
		}
		else = {
			if = {	#saving first target and resetting count
				limit = { 
					event_target:SKU_LAST_CREATED_LIST = {
						OR ={
							not = { exists = this }
							and = {
								not = { has_country_flag = SKU_USED_LIST }
								has_country_flag = SKU_EMPTY_LIST
							}
						}
					} 
				}
				random_country = {
					limit = {
						has_country_flag = SKU_EMPTY_LIST
					}
					remove_country_flag = SKU_EMPTY_LIST
					set_country_flag = SKU_USED_LIST
					save_event_target_as = SKU_LAST_CREATED_LIST
					#SKU_ON_LIST_CREATION = yes
					set_variable = {
						which = SKU_ORDINAL
						value = 0
					}
				}
				log = "----------SKU----------"
				log = "Filling List:"
				switch = { #switch to assign propper flag
					trigger = is_scope_type
					country = { log = "-scope_type = country" } 
					fleet = { log = "-scope_type = fleet" } 
					galactic_object = { log = "-scope_type = galactic_object" } 
					leader = { log = "-scope_type = country" } 
					planet = { log = "-scope_type = country" } 
				}
				log = "-content:"
			}
			switch = { #switch to assign propper flag
				trigger = is_scope_type
				country = { set_country_flag = SKU_OBJECT_id_@event_target:SKU_LAST_CREATED_LIST log = "- #[prev.SKU_ORDINAL] [this.GetName]" } 
				fleet = { set_fleet_flag = SKU_OBJECT_id_@event_target:SKU_LAST_CREATED_LIST log = "- #[prev.SKU_ORDINAL] [this.GetName]" } 
				galactic_object = { set_star_flag = SKU_OBJECT_id_@event_target:SKU_LAST_CREATED_LIST log = "- #[this.SKU_ORDINAL] [this.GetName]" } 
				leader = { set_leader_flag = SKU_OBJECT_id_@event_target:SKU_LAST_CREATED_LIST log = "- #[prev.SKU_ORDINAL] [this.GetName]" } 
				planet = { set_planet_flag = SKU_OBJECT_id_@event_target:SKU_LAST_CREATED_LIST log = "- #[prev.SKU_ORDINAL] [this.GetName]" } 
			}
			log = "- #[this.SKU_ORDINAL] [this.GetName]"
			event_target:SKU_LAST_CREATED_LIST = {	#count
				change_variable = {
					which = SKU_ORDINAL
					value = 1
				}
			}
		}
	}
}


set_flag = {
	set_planet_flag = $flag$
}

target_scope = {
	every_$scope$ = {
		log = "[GetName]"
		root = { set_planet_flag = XX_@prev }
		set_flag = { flag = charge } 
	}
}



SKU_INITIALISE_NEW_LIST = {	#Add option to clear
	if = { #check if the scope is supported
		limit = {
			NOR = {
			is_scope_type = country
			is_scope_type = fleet
			is_scope_type = galactic_object
			is_scope_type = leader
			is_scope_type = planet
			}
		}
		log = "==========SKU=========="
		log = "FAILED TO FILL LIST"
		log = "ERRROR: UNSUPPORTED SCOPE"
		log = "supported scopes: country, fleet, galactic_object (for solar system), leader, planet"
		log = "=========================="
		break = yes 																								#ADD CLEARUP ON FAIL
	}
	else = {
		event_target:global_event_country = {
			if = {
				limit = {
					NAND = { 
						#has_country_flag = SKU_CURRENT_CYCLE_@last_created_country
						exists = last_created_country
						any_ambient_object = {
							has_ambient_object_flag = SKU_TEMP@prev
						}
					}
				}
				while = {
					limit = {
						any_country = {
							check_variable = {
								which = SKU_LIST_ID
								value = prev
							}
						}
					}
					change_variable = {
						which = SKU_LIST_ID
						value = 1
					}
				}
				### SPAWN DUMMY COUNTRY
				#as an anchor for the list, is destroyed after
				last_created_country = { #assigns unique ID
					set_variable = {
						which = SKU_LIST_ID
						value = event_target:global_event_country
					}
					event_target:global_event_country = { set_country_flag = SKU_CURRENT_CYCLE_@prev }
					#set_name = "SKU_LIST #[this.SKU_LIST_ID]"
					create_ambient_object = {
						type = abandoned_observation_outpost
						entity_scale_to_size = yes
						scale = 0.00001
					}
					last_created_ambient_object = {
						set_ambient_object_flag = SKU_TEMP@prev
					}
				}
			}
			
		}
		switch = { #switch to assign propper flag
			trigger = is_scope_type
			country = { set_timed_country_flag = { flag = SKU_OBJECT_event_id_@last_created_ambient_object days = 1 } }
			fleet = { set_timed_fleet_flag = { flag = SKU_OBJECT_id_@last_created_ambient_object days = 1 } }
			galactic_object = { set_timed_star_flag = { flag = SKU_OBJECT_id_@last_created_ambient_object days = 1 } }
			leader = { set_timed_leader_flag = { flag = SKU_OBJECT_id_@last_created_ambient_object days = 1 } }
			planet = { set_timed_planet_flag = { flag = SKU_OBJECT_id_@last_created_ambient_object days = 1 } }
		}
		
	}
}


SKU_FILL_NEW_LIST = {
	log = "----------SKU----------"
	log = "Creating List:"
	### SPAWN DUMMY COUNTRY
	#as an anchor for the list, is destroyed after
	last_created_country = { #assigns unique ID
		while = {
			limit = {
				any_country = {
					check_variable = {
						which = SKU_LIST_ID
						value = prev
					}
				}
			}
			change_variable = {
				which = SKU_LIST_ID
				value = 1
			}
		}
		set_name = "SKU_LIST #[this.SKU_LIST_ID]"
		save_event_target_as = SKU_LIST
		set_country_flag = SKU_LIST_ID_@this
	}
	log = "-List ID: [SKU_LIST.SKU_LIST_ID]"
	log = "-----------------------"
}


